# -*- coding: utf-8 -*-
"""Copy of Midterm Visdat_203012410027_Muhammad Rafi Yanaputeranto_203012410025_Hanif Aditya Pradana_ver2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FL6tyuoswpvn926RWCh6vDe_iu1nJByL

# Import Library
"""

# !pip install streamlit

import requests
import pandas as pd
import streamlit as st
import numpy as np
from matplotlib.patches import Patch
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import MinMaxScaler

# # 22/23
# df_s23 = pd.read_html('https://fbref.com/en/squads/e4a775cb/2022-2023/matchlogs/c9/schedule/Nottingham-Forest-Scores-and-Fixtures-Premier-League')[0]
# df_s23.to_csv('nottingham_22_23.csv', index=False)

# # 23/24
# df_s24 = pd.read_html('https://fbref.com/en/squads/e4a775cb/2023-2024/matchlogs/c9/schedule/Nottingham-Forest-Scores-and-Fixtures-Premier-League')[0]
# df_s24.to_csv('nottingham_23_24.csv', index=False)

# # 24/25
# df_s25 = pd.read_html('https://fbref.com/en/squads/e4a775cb/2024-2025/matchlogs/c9/schedule/Nottingham-Forest-Scores-and-Fixtures-Premier-League')[0]
# df_s25.to_csv('nottingham_24_25.csv', index=False)

# # Premier League stats (team-based)
# pd.read_html('https://fbref.com/en/comps/9/defense/Premier-League-Stats')[0].to_csv('pl_defense.csv', index=False)
# pd.read_html('https://fbref.com/en/comps/9/Premier-League-Stats')[0].to_csv('pl_summary.csv', index=False)
# pd.read_html('https://fbref.com/en/comps/9/keepers/Premier-League-Stats')[0].to_csv('pl_goalkeeping.csv', index=False)
# pd.read_html('https://fbref.com/en/comps/9/gca/Premier-League-Stats')[0].to_csv('pl_gca.csv', index=False)
# pd.read_html('https://fbref.com/en/comps/9/shooting/Premier-League-Stats')[0].to_csv('pl_shooting.csv', index=False)
# pd.read_html('https://fbref.com/en/comps/9/possession/Premier-League-Stats')[0].to_csv('pl_possession.csv', index=False)
# pd.read_html('https://fbref.com/en/comps/9/passing/Premier-League-Stats')[0].to_csv('pl_passing.csv', index=False)

# # Player-level shooting stats
# pd.read_html('https://fbref.com/en/comps/Big5/shooting/players/Big-5-European-Leagues-Stats')[0].to_csv('players_shooting.csv', index=False)

@st.cache_data
def load_and_clean_forest(filepath, season_prefix):
    df = pd.read_csv(filepath)
    df = df.drop(columns=['Date','Time', 'Day', 'Venue','Attendance', 'Captain', 'Referee', 'Match Report', 'Notes'], errors='ignore')
    df = df.dropna()
    df['Round'] = df['Round'].str.replace('Matchweek ', f'{season_prefix}_', regex=False)
    df['Round'] = df['Round'].astype(str)
    df.set_index('Round', inplace=True)
    return df

@st.cache_data
def load_csv(filepath):
    return pd.read_csv(filepath)

# Load Match Logs
df_s23 = load_and_clean_forest('nottingham_22_23.csv', '22/23')
df_s24 = load_and_clean_forest('nottingham_23_24.csv', '23/24')
df_s25 = load_and_clean_forest('nottingham_24_25.csv', '24/25')

# Load PL Stats
df_defend = load_csv('pl_defense.csv')
df_ss     = load_csv('pl_summary.csv')
df_gk     = load_csv('pl_goalkeeping.csv')
df_gca    = load_csv('pl_gca.csv')
df_sh     = load_csv('pl_shooting.csv')
df_ps     = load_csv('pl_possession.csv')
df_pass   = load_csv('pl_passing.csv')

# Load Player Shooting
df_shooting = load_csv('players_shooting.csv')

# Example preview in Streamlit
st.header("Nottingham Forest 22/23")
st.dataframe(df_s23.head())

st.header("Premier League Summary")
st.dataframe(df_ss.head())

st.header("Big 5 Players Shooting")
st.dataframe(df_shooting.head())

"""# General

Ada empat dataframe (df_s23, df_s24, df_25, df_gn) pada bagian ini, di mana tiap dataframe memiliki kolom yang sama, yaitu:

*   Result: Hasil pertandingan
*   GF: Gol yang dicetak oleh Nottingham Forest pada pertandingan
*   GA: Gol yang dicetak oleh lawan ke gawang Nottingham Forest
*   xG: Kemungkinan peluang menjadi gol yang diciptakan oleh Nottingham Forest
*   xGA: Kemungkinan peluang menjadi gol yang diciptakan oleh lawan
*   Poss: Penguasaan bola (%) Nottingham Forest pada pertandingan
*   Formation: Formasi yang digunakan oleh Nottingham Forest pada pertandingan
*   Opp Formation: Formasi yang digunakan oleh lawan Nottingham Forest pada pertandingan

## Import Dataset & Preprocessing

### Match
"""

@st.cache_data
def load_data():
    df = pd.read_csv('nottingham_22_23.csv')
    df = df.drop(columns=['Date','Time', 'Day', 'Venue','Attendance', 'Captain', 'Referee', 'Match Report', 'Notes'])
    df = df.dropna()
    df['Round'] = df['Round'].str.replace('Matchweek ', '22/23_')
    df['Round'] = df['Round'].astype(str)
    df.set_index('Round', inplace=True)
    return df

df_s23 = load_data()
st.dataframe(df_s23.head())

# 23/24 Season
df_s24 = pd.read_html(gn_md_df)
df_s24 = df_s24[0]

df_s24 = df_s24.drop(columns=['Date','Time', 'Day', 'Venue','Attendance', 'Captain', 'Referee', 'Match Report', 'Notes'])
df_s24 = df_s24.dropna()
df_s24['Round'] = df_s24['Round'].str.replace('Matchweek ', '23/24_')
df_s24['Round'] = df_s24['Round'].astype(str)
df_s24.set_index('Round', inplace=True)

df_s24.head()

# 24/25 Season
# Match
df_s25 = pd.read_html(gn_md_df)
df_s25 = df_s25[0]

df_s25 = df_s25.drop(columns=['Date','Time', 'Day', 'Venue','Attendance', 'Captain', 'Referee', 'Match Report', 'Notes'])
df_s25 = df_s25.dropna()
df_s25['Round'] = df_s25['Round'].str.replace('Matchweek ', '24/25_')
df_s25['Round'] = df_s25['Round'].astype(str)
df_s25.set_index('Round', inplace=True)

df_s25.head()

# Merge dataframe
df_gn = pd.concat([df_s23, df_s24, df_s25])
df_gn.tail()

"""## Visualisasi data

### Line Plot Perbandingan Sebelum dan Sesudah Pergantian Pelatih
"""

ax = df_gn[['xG','xGA']].plot(
    kind='line',
    figsize=(10,6),
    title='xGA Nottingham Forest',
    color=['#0072B2', '#E69F00']
)

change_pos = df_gn.index.get_loc('23/24_19')

ax.axvline(x=change_pos, color='#D55E00', linestyle='--', linewidth=2, label='Perubahan Pelatih Kepala')

ax.axvspan(0, change_pos, color='#cfe2f3', alpha=0.3, label='Sebelum')
ax.axvspan(change_pos, len(df_gn), color='#fce5cd', alpha=0.3, label='Setelah')

ax.set_xlabel('Round')
ax.set_ylabel('Value')
ax.legend()
plt.tight_layout()
plt.show()

ax = df_gn[['xG','xGA']].plot(
    kind='line',
    figsize=(10,6),
    title='xGA Nottingham Forest',
    color=['#0072B2', '#E69F00']
)

change_pos = df_gn.index.get_loc('23/24_19')

ax.axvline(x=change_pos, color='#D55E00', linestyle='--', linewidth=2, label='Perubahan Pelatih Kepala')

ax.axvspan(0, change_pos, color='#cfe2f3', alpha=0.3, label='Sebelum')
ax.axvspan(change_pos, len(df_gn), color='#fce5cd', alpha=0.3, label='Setelah')

ax.set_xlabel('Round')
ax.set_ylabel('Value')
ax.legend().remove()
plt.tight_layout()
plt.show()

"""### Scatter Plot Possession vs xG dan Possession vs xGA untuk musim 24/25"""

# Scatter plot hubungan antara possession dengan xG untuk musim 24/25
plt.figure(figsize=(10, 6))
plt.scatter(df_s25['Poss'], df_s25['xG'])
plt.xlabel('Possession')
plt.ylabel('xG')
plt.title('Scatter Plot Possession vs xG untuk Musim 24/25')

# Scatter plot hubungan antara possession dengan xGA untuk musim 24/25
plt.figure(figsize=(10, 6))
plt.scatter(df_s25['Poss'], df_s25['xGA'])
plt.xlabel('Possession')
plt.ylabel('Goals Scored')
plt.title('Scatter Plot Possession vs xGA untuk Musim 24/25')
plt.show()

"""### GF-GA untuk tiap musim"""

df_gn['GF-GA'] = df_gn['GF'] - df_gn['GA']

# Menyimpan total GF-GA untuk musim 22/23
total_gfga_2223 = df_gn.loc['22/23_1':'22/23_38', 'GF-GA'].sum()
print(f'Total GF-GA untuk musim 22/23: {total_gfga_2223}')

# Menyimpan total GF-GA untuk musim 23/24
total_gfga_2324 = df_gn.loc['23/24_1':'23/24_38', 'GF-GA'].sum()
print(f'Total GF-GA untuk musim 23/24: {total_gfga_2324}')

# Menyimpan total GF-GA untuk musim 24/25
total_gfga_2425 = df_gn.loc['24/25_1':'24/25_38', 'GF-GA'].sum()
print(f'Total GF-GA untuk musim 24/25: {total_gfga_2425}')

# Menyimpan total GF-GA ke dataframe baru
df_gfga = pd.DataFrame({'Total GF-GA': [total_gfga_2223, total_gfga_2324, total_gfga_2425]}, index=['22/23', '23/24', '24/25'])
df_gfga

# Plot tren GF-GA
df_gfga.plot(kind='bar', figsize=(10,6), legend=False, title='Total GF-GA Nottingham Forest tiap Musim')
plt.axhline(y=0, color='r', linestyle='--')
plt.grid(axis='y')
plt.tight_layout()
plt.show()

"""### Boxplot posssession dan perbandingan peluang yang dihasilkan Nottingham Forest dan Lawannya berdasarkan formasi yang digunakan"""

# Boxplot perbandingan nilai xG untuk tiap formasi yang digunakan
df_gn.boxplot(column='xG', by='Formation', figsize=(10,6))
plt.suptitle('')
plt.xlabel('Formation')
plt.ylabel('Value')
plt.title('Boxplot perbandingan nilai xG untuk tiap formasi yang digunakan')
plt.tight_layout()
plt.show()

# Boxplot perbandingan nilai xGA untuk tiap formasi yang digunakan
df_gn.boxplot(column='xGA', by='Formation', figsize=(10,6))
plt.suptitle('')
plt.xlabel('Formation')
plt.ylabel('Value')
plt.title('Boxplot perbandingan nilai xGA untuk tiap formasi yang digunakan')
plt.tight_layout()
plt.show()

# Boxplot perbandingan nilai Poss untuk tiap formasi yang digunakan
df_gn.boxplot(column='Poss', by='Formation', figsize=(10,6))
plt.suptitle('')
plt.xlabel('Formation')
plt.ylabel('Value')
plt.title('Boxplot perbandingan nilai Possession untuk tiap formasi yang digunakan')
plt.tight_layout()
plt.show()

avgxG_sc = df_gn.loc['22/23_1':'23/24_18', 'xG'].mean()
avgxG_nes = df_gn.loc['23/24_19':'24/25_32', 'xG'].mean()

print(f'Rata-rata xG tiap Match Nottingham Forest di bawah Kepelatihan Steve Cooper: {avgxG_sc:.2f}')
print(f'Rata-rata xG tiap Match Nottingham Forest di bawah Kepelatihan Nuno Espirito Santo: {avgxG_nes:.2f}')

avgxGA_sc = df_gn.loc['22/23_1':'23/24_18', 'xGA'].mean()
avgxGA_nes = df_gn.loc['23/24_19':'24/25_32', 'xGA'].mean()

print(f'Rata-rata xGA tiap Match Nottingham Forest di bawah Kepelatihan Steve Cooper: {avgxGA_sc:.2f}')
print(f'Rata-rata xGA tiap Match Nottingham Forest di bawah Kepelatihan Nuno Espirito Santo: {avgxGA_nes:.2f}')

df_sc = df_gn.loc[df_gn.index <= '23/24_18']
df_nes= df_gn.loc[df_gn.index > '23/24_18']

result_counts_sc = df_sc['Result'].value_counts()
result_counts_nes = df_nes['Result'].value_counts()

result_comparison = pd.DataFrame({'Steve Cooper': result_counts_sc, 'Nuno Espirito Santo': result_counts_nes}).fillna(0).astype(int)

result_comparison

"""# Defensive Actions

Dataframe utama pada bagian ini, yaitu df_dfd, memiliki beberapa kolom, yaitu:

*   90s: Banyaknya pertandingan yang dimainkan oleh tiap tim
*   Tackles: Banyaknya tekel yang dilakukan oleh tiap tim selama satu musim
*   Tackles Won: Banyaknya tekel yang dilakukan oleh tiap tim dan berhasil merebut bola dari lawan sehingga penguasaan bola kembali ke tim tersebut
*   Tackles Def 3rd: Banyaknya tekel yang dilakukan oleh tiap tim pada daerah pertahanan mereka sendiri
*   Tackles Mid 3rd: Banyaknya tekel yang dilakukan oleh tiap tim pada daerah tengah lapangan di antara pertahanan mereka dan pertahanan lawan
*   Tackles Att 3rd: Banyaknya tekel yang dilakukan oleh tiap tim pada daerah pertahanan lawan
*   Goals Against: Banyaknya gol yang bersarang ke gawang tiap tim (banyaknya kebobolan)
*   Cleansheets: Banyak pertandingan di mana suatu tim tidak kebobolan sama sekali
*   xGA: Banyaknya peluang menjadi gol yang diciptakan oleh lawan dari tiap tim

## Import Dataset & Preprocessing
"""

# Season

df_defend = pd.read_html(pl_df)
df_defend = df_defend[0]

df_ss = pd.read_html(pl_ss)
df_ss = df_ss[0]

df_gk = pd.read_html(pl_gk)
df_gk = df_gk[0]

df_defend.columns = [' '.join(col).strip() for col in df_defend.columns]
df_defend = df_defend.reset_index(drop=True)

df_ss.columns = [' '.join(col).strip() for col in df_ss.columns]
df_ss = df_ss.reset_index(drop=True)

df_gk.columns = [' '.join(col).strip() for col in df_gk.columns]
df_gk = df_gk.reset_index(drop=True)

new_columns = []
for col in df_defend.columns:
  if 'level_0' in col:
      new_col = col.split()[-1]
  else:
      new_col = col
  new_columns.append(new_col)

df_defend.columns = new_columns

new_columns = []
for col in df_ss.columns:
  if 'level_0' in col:
      new_col = col.split()[-1]
  else:
      new_col = col
  new_columns.append(new_col)

df_ss.columns = new_columns

new_columns = []
for col in df_gk.columns:
  if 'level_0' in col:
      new_col = col.split()[-1]
  else:
      new_col = col
  new_columns.append(new_col)

df_gk.columns = new_columns

df_defend.columns

df_ss.columns

df_gk.columns

df_defend = df_defend[['Squad', '90s', 'Tackles Tkl','Tackles TklW', 'Tackles Def 3rd', 'Tackles Mid 3rd', 'Tackles Att 3rd']]
df_defend.columns = ['Squad', '90s', 'Tackles','Tackles Won', 'Tackles Def 3rd', 'Tackles Mid 3rd', 'Tackles Att 3rd']

df_ss = df_ss[['S q u a d', 'x G A']]
df_ss.columns = ['Squad', 'xGA']

df_gk = df_gk[['Squad', 'Performance GA', 'Performance CS']]
df_gk.columns = ['Squad', 'Goals Against', 'Cleansheets']

df_dfd = df_defend.merge(df_gk, on='Squad').merge(df_ss, on='Squad')
df_dfd.tail()

df_dfd.set_index('Squad', inplace=True)

df_dfd.tail()

"""## Visualisasi"""

clubs = df_dfd.index

"""### Kebobolan"""

df_dfd['Goals Against'].plot(kind='bar', figsize=(10,6), title='Goals Against Nottingham Forest', color = ['red' if club == "Nott'ham Forest" else 'grey' for club in clubs])
plt.show()

top_10_least_GA = df_dfd['Goals Against'].sort_values().head(10)
top_10_least_GA

"""### Cleansheet"""

df_dfd['Cleansheets'].plot(kind='bar', figsize=(10,6), title='Cleansheets Nottingham Forest', color = ['red' if club == "Nott'ham Forest" else 'grey' for club in clubs])
plt.show()

top_10_most_cs = df_dfd['Cleansheets'].sort_values(ascending=False).head(10)
top_10_most_cs

"""### xGA"""

df_dfd['xGA'].plot(kind='bar', figsize=(10,6), title='xGA Nottingham Forest', color = ['red' if club == "Nott'ham Forest" else 'grey' for club in clubs])
plt.show()

top_10_least_xGA = df_dfd['xGA'].sort_values().head(10)
top_10_least_xGA

"""### Radar Chart"""

# Normalisasi data pertahanan terhadap rata-rata di Premier League
df_dfd['Tackles%'] = df_dfd['Tackles'] / df_dfd['Tackles'].mean()
df_dfd['Tackles Won%'] = df_dfd['Tackles Won'] / df_dfd['Tackles Won'].mean()
df_dfd['Goals Against%'] = df_dfd['Goals Against'] / df_dfd['Goals Against'].mean()
df_dfd['Cleansheets%'] = df_dfd['Cleansheets'] / df_dfd['Cleansheets'].mean()
df_dfd['xGA%'] = df_dfd['xGA'] / df_dfd['xGA'].mean()

scaler = MinMaxScaler()
df_dfd[['Tackles%', 'Tackles Won%', 'Goals Against%', 'Cleansheets%', 'xGA%']] = scaler.fit_transform(df_dfd[['Tackles%', 'Tackles Won%', 'Goals Against%', 'Cleansheets%', 'xGA%']])

to_scale = ['Tackles%', 'Tackles Won%', 'Goals Against%', 'Cleansheets%', 'xGA%']
scaler = MinMaxScaler()
df_dfd[to_scale] = scaler.fit_transform(df_dfd[to_scale])

club_name = "Nott'ham Forest"
club_values = df_dfd.loc[club_name, to_scale].tolist()
club_values_full = club_values + [club_values[0]]

percentiles = []
for col in to_scale:
    val = df_dfd.loc[club_name, col]
    if col in ['Goals Against%', 'xGA%']:
        pct = (df_dfd[col] > val).mean()
    else:
        pct = (df_dfd[col] < val).mean()
    percentiles.append(int(pct * 100))

percentiles_full = percentiles + [percentiles[0]]

labels = ['Tackles', 'Tackles Won', 'Goals Against', 'Cleansheets', 'xGA']
num_vars = len(labels)
angles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()
angles_full = angles + [angles[0]]

fig, ax = plt.subplots(figsize=(8, 8), subplot_kw=dict(polar=True))

ax.set_theta_offset(np.pi / 2)
ax.set_theta_direction(-1)

ax.set_xticks(angles)
ax.set_xticklabels(labels, fontsize=11, fontweight='medium')

ax.set_yticks([0.25, 0.5, 0.75, 1.0])
ax.set_ylim(0, 1.2)

ax.plot(angles_full, club_values_full, color='royalblue', linewidth=2)
ax.fill(angles_full, club_values_full, color='royalblue', alpha=0.25)

for angle, value, pct in zip(angles_full, club_values_full, percentiles_full):
    y_pos = value + 0.06
    y_pos = min(y_pos, 1.15)
    ax.text(angle, y_pos, f"{pct}%", ha='center', va='center',
            fontsize=10, fontweight='bold', color='black')

plt.title("Performa Nottingham Forest pada Tiap Metrik Pertahanan", fontsize=14, y=1.08, fontweight='bold')

plt.tight_layout()
plt.show()

"""### Stacked Bar Chart"""

# Stacked bar chart untuk data Tackles Def 3rd, Tackles Mid 3rd, Tackles Att 3rd, diurutkan berdasarkan data Goals Against
tackles_data = df_dfd[['Tackles Def 3rd', 'Tackles Mid 3rd', 'Tackles Att 3rd', 'Goals Against']]
tackles_data = tackles_data.sort_values(by='Goals Against', ascending=False)

plt.figure(figsize=(10, 6))

plt.bar(tackles_data.index, tackles_data['Tackles Def 3rd'], label='Tackles Def 3rd')
plt.bar(tackles_data.index, tackles_data['Tackles Mid 3rd'], bottom=tackles_data['Tackles Def 3rd'], label='Tackles Mid 3rd')
plt.bar(tackles_data.index, tackles_data['Tackles Att 3rd'], bottom=tackles_data['Tackles Def 3rd'], label='Tackles Mid 3rd')

plt.xticks(rotation=45, ha='right')
plt.xlabel('Squad')
plt.ylabel('Value')
plt.title('Stacked Bar Chart Tackles Def 3rd, Tackles Mid 3rd, Tackles Att 3rd', fontsize=14, fontweight='bold')
plt.legend()

plt.tight_layout()
plt.show()

"""# GCA

Kolom-kolom pada dataframe-dataframe yang digunakan pada bagian ini adalah:

*   SCA: Banyaknya peluang menjadi tendangan baik mengarah ataupun tidak mengarah ke gawang
*   GCA: Banyaknya peluang menjadi gol yang diciptakan
*   SCA 90: Banyaknya SCA per pertandingan
*   GCA 90: Banyaknya GCA per pertandingan

## Import Dataset & Preprocessing

### Season 2024/2025
"""

df_gca = pd.read_html(pl_gca)
df_gca = df_gca[0]
df_gca.tail()

df_gca.columns = [' '.join(col).strip() for col in df_gca.columns]
df_gca = df_gca.reset_index(drop=True)
df_gca.tail()

new_columns = []
for col in df_gca.columns:
  if 'level_0' in col:
      new_col = col.split()[-1]
  else:
      new_col = col
  new_columns.append(new_col)

df_gca.columns = new_columns
df_gca = df_gca.fillna(0)

df_gca.tail()

df_gca = df_gca[['Squad', '90s', 'SCA SCA', 'SCA SCA90', 'GCA GCA', 'GCA GCA90']]

df_gca.set_index('Squad', inplace=True)

df_gca.tail()

"""### Match (2022/2023 - 2024/2025)"""

# 22/23 Season
gca_md_df = 'https://fbref.com/en/squads/e4a775cb/2022-2023/matchlogs/c9/gca/Nottingham-Forest-Match-Logs-Premier-League'
df_s23_gca = pd.read_html(gca_md_df)
df_s23_gca = df_s23_gca[1]

df_s23_gca.columns

df_s23_gca = df_s23_gca[[('Against Nottingham Forest', 'Round'), ('Against Nottingham Forest', 'Opponent'), ('SCA Types', 'SCA'), ('GCA Types', 'GCA')]]
df_s23_gca.columns = ['Round', 'Opponent', 'SCA', 'GCA']
df_s23_gca.tail()

df_s23_gca = df_s23_gca.dropna()
df_s23_gca['Round'] = df_s23_gca['Round'].str.replace('Matchweek ', '22/23_')
df_s23_gca['Round'] = df_s23_gca['Round'].astype(str)
df_s23_gca['Home'] = 'Nottingham Forest'
df_s23_gca.set_index('Round', inplace=True)
df_s23_gca.tail()

# 23/24 Season
gca_md_df = 'https://fbref.com/en/squads/e4a775cb/2023-2024/matchlogs/c9/gca/Nottingham-Forest-Match-Logs-Premier-League'
df_s24_gca = pd.read_html(gca_md_df)
df_s24_gca = df_s24_gca[1]

df_s24_gca.columns

df_s24_gca = df_s24_gca[[('Against Nottingham Forest', 'Round'), ('Against Nottingham Forest', 'Opponent'), ('SCA Types', 'SCA'), ('GCA Types', 'GCA')]]
df_s24_gca.columns = ['Round', 'Opponent', 'SCA', 'GCA']
df_s24_gca.tail()

df_s24_gca = df_s24_gca.dropna()
df_s24_gca['Round'] = df_s24_gca['Round'].str.replace('Matchweek ', '23/24_')
df_s24_gca['Round'] = df_s24_gca['Round'].astype(str)
df_s24_gca.set_index('Round', inplace=True)
df_s24_gca['Home'] = 'Nottingham Forest'
df_s24_gca.tail()

# 24/25 season
gca_md_df = 'https://fbref.com/en/squads/e4a775cb/2024-2025/matchlogs/c9/gca/Nottingham-Forest-Match-Logs-Premier-League'
df_s25_gca = pd.read_html(gca_md_df)
df_s25_gca = df_s25_gca[1]

df_s25_gca.columns

df_s25_gca = df_s25_gca[[('Against Nottingham Forest', 'Round'), ('Against Nottingham Forest', 'Opponent'), ('SCA Types', 'SCA'), ('GCA Types', 'GCA')]]
df_s25_gca.columns = ['Round', 'Opponent', 'SCA', 'GCA']
df_s25_gca.tail()

df_s25_gca = df_s25_gca.dropna()
df_s25_gca['Round'] = df_s25_gca['Round'].str.replace('Matchweek ', '24/25_')
df_s25_gca['Round'] = df_s25_gca['Round'].astype(str)
df_s25_gca.set_index('Round', inplace=True)
df_s25_gca['Home'] = 'Nottingham Forest'
df_s25_gca.tail()

merge_gcas = pd.concat([df_s23_gca, df_s24_gca, df_s25_gca])
merge_gcas = merge_gcas.drop('Home', axis='columns')
merge_gcas.head()

"""## Visualisasi

### GCA Nottingham Forest
"""

ax = merge_gcas['GCA'].plot(
    kind='line',
    figsize=(10,6),
    title='GCA Nottingham Forest',
    color=['#0072B2', '#E69F00']
)

change_pos = df_gn.index.get_loc('23/24_19')

ax.axvline(x=change_pos, color='#D55E00', linestyle='--', linewidth=2, label='Perubahan Pelatih Kepala')

ax.axvspan(0, change_pos, color='#cfe2f3', alpha=0.3, label='Sebelum')
ax.axvspan(change_pos, len(df_gn), color='#fce5cd', alpha=0.3, label='Setelah')

ax.set_xlabel('Round')
ax.set_ylabel('Value')
ax.legend()
plt.tight_layout()
plt.show()

avg_gca_sc = merge_gcas['GCA'].iloc[1:55].mean()
avg_gca_nes = merge_gcas['GCA'].iloc[55:].mean()

print(f'Rata-rata GCA tiap Match Nottingham Forest di bawah Kepelatihan Steve Cooper: {avg_gca_sc:.2f}')
print(f'Rata-rata GCA tiap Match Nottingham Forest di bawah Kepelatihan Nuno Espirito Santo: {avg_gca_nes:.2f}')

merge_gcas['SCA'].iloc[1:55].count()

merge_gcas['SCA'].iloc[55:].count()

"""# Shooting

Kolom-kolom dataframe pada bagian ini adalah:


```
0 90s Banyaknya pertandingan yang dimainkan tiap tim
1 Goals Banyaknya gol yang diciptakan tiap tim
2 Shots Banyaknya tendangan yang diciptakan tiap tim
3 Shot on Target Banyaknya tendangan mengarah ke gawang yang diciptakan tiap tim
4 Shot on Target (%) Perbandingan Shot on Target dengan banyaknya Shots dalam persentase
5 Shot/90 Banyaknya tendangan yang diciptakan tiap tim per pertandingan
6 Shot on Target/90 Banyaknya tendangan mengarah ke gawang yang diciptakan tiap tim per pertandingan
7 Goals/Shot Banyaknya tendangan yang dibutuhkan untuk menciptakan satu gol
8 Goals/Shot on Target Banyaknya tendangan mengarah ke gawang yang dibutuhkan untuk menciptakan satu gol
9 xG Banyaknya probabilitas tendangan menjadi gol yang diciptakan oleh tiap tim
10 npxG Banyaknya probabilitas tendangan menjadi gol yang diciptakan oleh tiap tim tanpa penalti
11 npxG/Shot Banyaknya probabilitas tendangan menjadi gol yang diciptakan oleh tiap tim per tendangan dan tanpa penalti
12 Goals-xG Mengecek apakah suatu tim efektif dalam menyelesaikan peluang yang mereka dapatkan dari banyaknya gol yang mereka ciptakan dikurangi nilai probabilitas suatu tendangan menjadi gol
13 npxG-npG Mengecek apakah suatu tim efektif dalam menyelesaikan peluang yang mereka dapatkan dari banyaknya gol yang mereka ciptakan dikurangi nilai probabilitas suatu tendangan menjadi gol (tanpa menghitung penalti)
14 Touches per Goal Berapa banyak sentuhan terhadap bola yang dibutuhkan oleh suatu tim untuk menciptakan gol
15 Passes per Goal Berapa banyak operan yang dibutuhkan oleh suatu tim untuk menciptakan gol
```

## Import Dataset & Preprocessing
"""

df_sh = pd.read_html(pl_sh)
df_sh = df_sh[0]
df_sh.tail()

df_sh.columns = [''.join(col).strip() for col in df_sh.columns]
df_sh = df_sh.reset_index(drop=True)
df_sh.tail()

new_columns = []
for col in df_sh.columns:
  if 'level_0' in col:
      new_col = col.split()[-1]
  else:
      new_col = col
  new_columns.append(new_col)

df_sh.columns = new_columns
df_sh = df_sh.fillna(0)

df_sh.tail()

df_sh.columns

df_sh = df_sh[['0_level_0Squad', '2_level_090s', 'StandardGls', 'StandardSh', 'StandardSoT', 'StandardSoT%', 'StandardSh/90', 'StandardSoT/90', 'StandardG/Sh', 'StandardG/SoT',
                 'ExpectedxG', 'ExpectednpxG', 'ExpectednpxG/Sh', 'ExpectedG-xG', 'Expectednp:G-xG']]
df_sh.columns = ['Squad', '90s', 'Goals', 'Shots', 'Shot on Target', 'Shot on Target (%)', 'Shot/90', 'Shot on Target/90', 'Goals/Shot', 'Goals/Shot on Target',
                 'xG', 'npxG', 'npxG/Shot', 'Goals-xG', 'npxG-npG']

df_sh.set_index('Squad', inplace=True)

df_sh.tail()

"""## Visualisasi

### xG
"""

df_sh['xG'].plot(kind='bar', figsize=(10,6), title='xG Nottingham Forest', color = ['red' if club == "Nott'ham Forest" else 'grey' for club in clubs])
plt.show()

top_10_most_xG = df_sh['xG'].sort_values(ascending=False).head(10)
top_10_most_xG

"""### Goals - xG"""

df_sh['Goals-xG'].plot(kind='bar', figsize=(10,6), title='Goals-xG Nottingham Forest', color = ['red' if club == "Nott'ham Forest" else 'grey' for club in clubs])
plt.show()

top_10_most_GxG = df_sh['Goals-xG'].sort_values(ascending=False).head(10)
top_10_most_GxG

df_sh[['Goals-xG', 'xG', 'Goals']].sort_values(by='Goals-xG', ascending=False).head(10)

"""# Possession

Kolom-kolom dataframe yang digunakan pada bagian ini adalah:


```
0 90s Banyaknya pertandingan yang dimainkan tiap tim
1 Poss Rata-rata penguasaan bola tiap tim selama satu musim
2 Touches Total sentuhan terhadap bola tiap tim selama satu musim
3 Touches Def 3rd Total sentuhan terhadap bola tiap tim pada daerah pertahanan mereka sendiri selama satu musim
4 Touches Mid 3rd Total sentuhan terhadap bola tiap tim pada daerah tengah lapangan selama satu musim
5 Touches Att 3rd Total sentuhan terhadap bola tiap tim pada daerah pertahnan lawan
6 Touches Att Pen Total sentuhan terhadap bola tiap tim pada kotak penalti lawan
7 Tackles Total tekel yang dilakukan oleh tiap tim selama satu musim
```

## Import Dataset & Preprocessing
"""

df_ps = pd.read_html(pl_ps)
df_ps = df_ps[0]
df_ps.tail()

df_ps.columns = [' '.join(col).strip() for col in df_ps.columns]
df_ps = df_ps.reset_index(drop=True)
df_ps.tail()

new_columns = []
for col in df_ps.columns:
  if 'level_0' in col:
      new_col = col.split()[-1]
  else:
      new_col = col
  new_columns.append(new_col)

df_ps.columns = new_columns
df_ps = df_ps.fillna(0)

df_ps.tail()

df_ps.columns

df_ps = df_ps[['Squad', '90s', 'Poss', 'Touches Touches','Touches Def 3rd', 'Touches Mid 3rd', 'Touches Att 3rd', 'Touches Att Pen']]
df_ps.set_index('Squad', inplace=True)
df_ps.tail()

"""## Visualisasi

### Touches per Goal
"""

df_sh['Touches per Goal'] = df_ps['Touches Touches']/df_sh['Goals']
df_sh.tail()

df_sh['Touches per Goal'].plot(kind='bar', figsize=(12, 6), rot=90, title='Touches per Goal',color = ['red' if club == "Nott'ham Forest" else 'grey' for club in clubs])

bottom_10_tch_per_goal = df_sh['Touches per Goal'].sort_values().head(10)
bottom_10_tch_per_goal

"""### Possession"""

df_ps['Poss'].plot(kind='bar', figsize=(12, 6), rot=90, title='Possession Nottingham Forest', color = ['red' if club == "Nott'ham Forest" else 'grey' for club in clubs])

bottom_10_poss = df_ps['Poss'].sort_values().head(10)
bottom_10_poss

"""### Possession and Tackles Scatter Plot"""

df_ps['Tackles'] = df_dfd[['Tackles Def 3rd', 'Tackles Mid 3rd', 'Tackles Att 3rd']].sum(axis=1)
df_ps.head()

plt.figure(figsize=(10, 6))
ax = plt.gca()

clubs = df_ps.index.tolist()

colors = ['red' if club == "Nott'ham Forest" else 'grey' for club in clubs]

ax.scatter(df_ps['Poss'], df_ps['Tackles'], color=colors, alpha=0.7)

for i, club in enumerate(clubs):
    ax.annotate(
        club,
        (df_ps['Poss'].iloc[i], df_ps['Tackles'].iloc[i]),
        fontsize=9,
        color='black' if club != "Nott'ham Forest" else 'red',
        fontweight='bold' if club == "Nott'ham Forest" else 'normal',
        xytext=(4, 2),
        textcoords='offset points',
        zorder=3
    )

ax.set_xlabel('Possession (%)')
ax.set_ylabel('Tackles')
ax.set_title('Hubungan antara Possession dan Tackles per Klub', fontsize=14)

plt.tight_layout()
plt.show()

df_ps.head()

"""# Passing

Kolom-kolom dataframe yang digunakan pada bagian ini adalah:

```
0 90s Banyaknya pertandingan yang dimainkan tiap tim
1 Total Att Banyaknya percobaan operan yang dilakukan tiap tim selama satu musim
2 Total Cmp Banyaknya percobaan operan berhasil yang dilakukan tiap tim selama satu musim
```

## Import Dataset & Preprocessing
"""

df_pass = pd.read_html(pl_pass)
df_pass = df_pass[0]
df_pass.tail()

df_pass.columns = [' '.join(col).strip() for col in df_pass.columns]
df_pass = df_pass.reset_index(drop=True)
df_pass.tail()

new_columns = []
for col in df_pass.columns:
  if 'level_0' in col:
      new_col = col.split()[-1]
  else:
      new_col = col
  new_columns.append(new_col)

df_pass.columns = new_columns
df_pass = df_pass.fillna(0)

df_pass.tail()

df_pass.columns

df_pass = df_pass[['Squad', '90s', 'Total Att', 'Total Cmp']]
df_pass.set_index('Squad', inplace=True)
df_pass.tail()

"""## Visualisasi

### Passes per Goal
"""

df_sh['Passes per Goal'] = df_pass['Total Att'] / df_sh['Goals']
df_sh.tail()

df_sh['Passes per Goal'].plot(kind='bar', figsize=(12, 6), rot=90, title='Passes per Goal',color = ['red' if club == "Nott'ham Forest" else 'grey' for club in clubs])

bottom_10_passes_per_goal = df_sh['Passes per Goal'].sort_values().head(10)
bottom_10_passes_per_goal

"""# Pemain

Kolom-kolom dataframe yang digunakan pada bagian ini adalah:


```
0 Player Nama tiap pemain
1 Standard Gls Banyak gol yang diciptakan tiap pemain selama satu musim
2 Expected xG Banyaknya probabilitas suatu tendangan menjadi gol yang diciptakan oleh pemain
3 Expected G-xG Mengecek seberapa efektif tiap pemain dalam menyelesaikan peluang yang mereka dapatkan
```
"""

df_shooting = pd.read_html(players_shooting)
df_shooting = df_shooting[0]
df_shooting.tail()

df_shooting.columns = [' '.join(col).strip() for col in df_shooting.columns]
df_shooting = df_shooting.reset_index(drop=True)
df_shooting.tail()

new_columns = []
for col in df_shooting.columns:
  if 'level_0' in col:
      new_col = col.split()[-1]
  else:
      new_col = col
  new_columns.append(new_col)

df_shooting.columns = new_columns
df_shooting = df_shooting.fillna(0)

df_shooting.head()

df_shooting.info()

df_shooting = df_shooting[df_shooting['Comp'] == 'eng Premier League']
df_shooting = df_shooting[['Player', 'Standard Gls', 'Expected xG', 'Expected G-xG']]
df_shooting.head()

df_shooting.info()

# Convert all columns except 'Player' to numeric, coercing errors
for col in df_shooting.columns:
    if col != 'Player':
        df_shooting[col] = pd.to_numeric(df_shooting[col], errors='coerce')

# Optionally, drop rows where any of the numeric columns have NaNs
df_shooting = df_shooting.dropna()

top_10_gls = df_shooting.sort_values(by='Standard Gls', ascending=False).head(10)
top_10_gls

# Menyimpan seluruh dataframe ke dalam file excel
df_dfd.to_excel('df_dfd.xlsx', index=False)
df_gn.to_excel('df_gn.xlsx', index=False)
df_gca.to_excel('df_gca.xlsx', index=False)
df_sh.to_excel('df_sh.xlsx', index=False)
df_ps.to_excel('df_ps.xlsx', index=False)
df_pass.to_excel('df_pass.xlsx', index=False)

"""# Plot Formasi"""

print('Formation:', df_gn['Formation'].unique())
print('Opp Formation:', df_gn['Opp Formation'].unique())

df_gn

test = df_gn['Formation'][0]

test

df_gn['Formation']

# !pip install mplsoccer

from mplsoccer import VerticalPitch
import matplotlib.pyplot as plt

def get_vertical_coords(formation_str):
    lines = list(map(int, formation_str.split('-')))
    y_levels = [13 + i * (40 / (len(lines) - 1)) for i in range(len(lines))]

    coords = []
    for y, players_in_line in zip(y_levels, lines):
        spacing = 100 / (players_in_line + 1)
        for i in range(1, players_in_line + 1):
            x = -10 + i * spacing
            coords.append((x, y))
    return coords

def plot_vertical_formation(formation_str, color='dodgerblue'):
    pitch = VerticalPitch(pitch_color='#292a2b', pitch_type='statsbomb', line_color='white')
    fig, ax = pitch.draw(figsize=(3, 6))

    coords = get_vertical_coords(formation_str)
    for i, (x, y) in enumerate(coords, 1):
        ax.plot(x, y, 'o', color=color, markersize=8)

    plt.show()

plot_vertical_formation("4-2-3-1", color='dodgerblue')

plot_vertical_formation('3-4-1-2', color='crimson')

df_gn['Opp Formation'].unique()

df_gn

df_gn.index[112]

df_gn.index.unique().tolist()

df_gn['xG'][df_gn.index[2]]

df_gn['xG'][df_gn.index.unique().tolist()]

df_gn['xG']

df_gn[['xG', 'xGA']]

"""# Streamlit

## Install Library
"""

# !pip install streamlit -q
# !npm install -g localtunnel

"""## Mengubah Dataframe Menjadi file pickle"""

# Mengubah tiap dataframe menjadi pickle
df_gn.to_pickle("df_gn.pkl")
df_sh.to_pickle("df_sh.pkl")
df_ps.to_pickle("df_ps.pkl")
df_pass.to_pickle("df_pass.pkl")
df_dfd.to_pickle("df_dfd.pkl")
df_gca.to_pickle("df_gca.pkl")
df_shooting.to_pickle("df_shooting.pkl")
merge_gcas.to_pickle("merge_gcas.pkl")

"""## Implementasi Streamlit"""

# !pip install streamlit-bokeh

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# from sklearn.preprocessing import MinMaxScaler
# from mplsoccer import VerticalPitch
# import matplotlib.pyplot as plt
# import bokeh
# from bokeh.plotting import figure
# from bokeh.io import output_notebook
# from bokeh.io import curdoc
# from bokeh.models import HoverTool, ColumnDataSource
# from streamlit_bokeh import streamlit_bokeh
# 
# st.set_page_config(layout="wide", page_title="Nottingham Forest Dashboard")
# 
# # Formation
# def get_vertical_coords(formation_str):
#     lines = list(map(int, formation_str.split('-')))
#     y_levels = [13 + i * (40 / (len(lines) - 1)) for i in range(len(lines))]
# 
#     coords = []
#     for y, players_in_line in zip(y_levels, lines):
#         spacing = 100 / (players_in_line + 1)
#         for i in range(1, players_in_line + 1):
#             x = -10 + i * spacing
#             coords.append((x, y))
#     return coords
# 
# def plot_vertical_formation(formation_str, color='dodgerblue'):
#     pitch = VerticalPitch(pitch_color='#292a2b', pitch_type='statsbomb', line_color='white')
#     fig, ax = pitch.draw(figsize=(3, 6))
# 
#     coords = get_vertical_coords(formation_str)
#     for i, (x, y) in enumerate(coords, 1):
#         ax.plot(x, y, 'o', color=color, markersize=8)
#     st.pyplot(fig)
# 
# # Match Result Container
# def display_match_result(result):
#     """
#     Displays a colored container in Streamlit based on the match result.
# 
#     Args:
#         result (str): The result of the match ('Win', 'Loss', or 'Draw').
#     """
#     if result == 'W':
#         container_html = """
#             <div style="background-color: #90EE90; padding: 10px; border-radius: 5px;">
#                 <h3 style="color: black; text-align: center;">Won</h3>
#             </div>
#         """
#         st.markdown(container_html, unsafe_allow_html=True)
#     elif result == 'L':
#         container_html = """
#             <div style="background-color: #F08080; padding: 10px; border-radius: 5px;">
#                 <h3 style="color: black; text-align: center;">Lost</h3>
#             </div>
#         """
#         st.markdown(container_html, unsafe_allow_html=True)
#     elif result == 'D':
#         container_html = """
#             <div style="background-color: #D3D3D3; padding: 10px; border-radius: 5px;">
#                 <h3 style="color: black; text-align: center;">Draw</h3>
#             </div>
#         """
#         st.markdown(container_html, unsafe_allow_html=True)
# 
# # Possession Container
# def display_possession_bar(possession):
#     """
#     Displays a container that fills horizontally based on a percentage,
#     like a progress bar for ball possession.
# 
#     Args:
#         possession (int or float): The possession percentage (0 to 100).
#     """
#     # Ensure possession is within the 0-100 range
#     possession = max(0, min(100, possession))
# 
#     # Define the colors
#     fill_color = "#31B531"  # A nice light green
#     bg_color = "#383838"   # A light grey for the empty part
# 
#     # The CSS for the linear gradient background
#     # This creates a sharp line between the filled and non-filled parts
#     background_style = (
#         f"background: linear-gradient(to right, {fill_color} {possession}%, {bg_color} {possession}%);"
#     )
# 
#     # The HTML for the container
#     container_html = f'''
#         <div style="{background_style} padding: 4px 10px; border-radius: 4px;">
#             <h5 style="color: white; text-align: center; margin: 0;">
#                 {possession}%
#             </h5>
#         </div>
#     '''
#     st.markdown(container_html, unsafe_allow_html=True)
# 
# # Load DataFrames
# df_gn_display = pd.read_pickle("df_gn.pkl")
# df_sh_display = pd.read_pickle("df_sh.pkl")
# df_ps_display = pd.read_pickle("df_ps.pkl")
# df_pass_display = pd.read_pickle("df_pass.pkl")
# df_dfd_display = pd.read_pickle("df_dfd.pkl")
# df_gca_display = pd.read_pickle("df_gca.pkl")
# df_shooting_display = pd.read_pickle("df_shooting.pkl")
# merge_gcas_display = pd.read_pickle("merge_gcas.pkl")
# 
# rounds = df_gn_display.index.unique().tolist()
# 
# 
# # Tabs for layout
# tab1, tab2, tab3, tab4, tab5, tab6, tab7 = st.tabs([
#     "📊 GCA",
#     "🎯 Shooting",
#     "📈 Possession",
#     "🎯 Passing",
#     "🛡️ Defensive",
#     "📌 GCA Details",
#     "⚽ Players Shooting"
# ])
# 
# with tab1:
#     st.title("GCA")
# 
#     st.subheader("Chance of Goal for Team vs Opponent")
#     with st.container():
#         x = df_gn_display.index.to_list()
#         y = df_gn_display['xG'].to_list()
#         y_opp = df_gn_display['xGA'].to_list()
# 
#         # Create a ColumnDataSource with all the necessary data
#         source = ColumnDataSource(data=dict(
#             x=x,
#             y=y,
#             y_opp=y_opp,
#         ))
# 
#         # create a new plot with a title and axis labels
#         p = figure(x_axis_label="Round", y_axis_label="Value", x_range=x, height=140, sizing_mode="stretch_width")
# 
#         # Add a HoverTool
#         hover = HoverTool(
#             tooltips=[
#                 ("Round", "@x"),
#                 ("Team Chances", "@y"),
#                 ("Opponent Chances", "@y_opp"),
#             ],
#             mode='mouse' # Add mode='mouse' for better interaction
#         )
#         p.add_tools(hover)
# 
#         # add multiple renderers
#         p.line(x='x', y='y', source=source, legend_label="Team Chances", color="#0072B2", line_width=3)
#         p.line(x='x', y='y_opp', source=source, legend_label="Opponent Chances", color="#E69F00", line_width=3)
#         p.xaxis.major_label_orientation = 0.785
# 
#         # show the results
#         streamlit_bokeh(p, theme='dark_minimal')
# 
#     st.markdown("---")
# 
#     st.subheader("Game-by-Game GCA")
#     selected_round = st.selectbox("Select Match Round", options=rounds)
#     df_gn_filtered = df_gn_display.loc[[selected_round]]
# 
#     # Formation
#     col1, col2, col3 = st.columns([0.4, 0.3, 0.3], vertical_alignment='center')
# 
#     with col1:
#         # Opponent
#         with st.container():
#             st.markdown("##### **Opponent**")
#         with st.container(border=True):
#             opponent = df_gn_filtered['Opponent'][0]
#             opponent_html = f'''
#                 <div style="background-color: #0000FF00; padding: 10px; border-radius: 5px;">
#                     <h5 style="color: white; text-align: center;">{opponent}</h5>
#                 </div>
#             '''
#             st.markdown(opponent_html, unsafe_allow_html=True)
# 
#         # Match Result
#         with st.container():
#             st.markdown("##### **Match Result**")
#             match_result = df_gn_filtered['Result'][0]
#             display_match_result(match_result)
# 
#         # Team & Opponent Goals
#         with st.container():
#             nested_col1, nested_col2 = st.columns(2, vertical_alignment="center")
#             with nested_col1:
#                 with st.container():
#                     st.markdown("##### **Team Goals (GF)**")
#                 with st.container(border=True):
#                     gf_result = df_gn_filtered['GF'][0]
#                     gf_html = f'''
#                         <div style="background-color: #0000FF00; padding: 5px; border-radius: 5px;">
#                             <h5 style="color: white; text-align: center;">{gf_result}</h5>
#                         </div>
#                     '''
#                     st.markdown(gf_html, unsafe_allow_html=True)
#             with nested_col2:
#                 with st.container():
#                     st.markdown("##### **Opponent Goals (GA)**")
#                 with st.container(border=True):
#                     ga_result = df_gn_filtered['GA'][0]
#                     ga_html = f'''
#                         <div style="background-color: #0000FF00; padding: 5px; border-radius: 5px;">
#                             <h5 style="color: white; text-align: center;">{ga_result}</h5>
#                         </div>
#                     '''
#                     st.markdown(ga_html, unsafe_allow_html=True)
# 
#         # Team & Opponent Goals Chance
#         with st.container():
#             nested_col3, nested_col4 = st.columns(2, vertical_alignment="center")
#             with nested_col3:
#                 with st.container():
#                     st.markdown("##### **Team Goals Chance (xG)**")
#                 with st.container(border=True):
#                     xg_result = df_gn_filtered['xG'][0]
#                     xg_html = f'''
#                         <div style="background-color: #0000FF00; padding: 5px; border-radius: 5px;">
#                             <h5 style="color: white; text-align: center;">{xg_result}</h5>
#                         </div>
#                     '''
#                     st.markdown(xg_html, unsafe_allow_html=True)
#             with nested_col4:
#                 with st.container():
#                     st.markdown("##### **Opponent Goals Chance (xGA)**")
#                 with st.container(border=True):
#                     xga_result = df_gn_filtered['xGA'][0]
#                     xga_html = f'''
#                         <div style="background-color: #0000FF00; padding: 5px; border-radius: 5px;">
#                             <h5 style="color: white; text-align: center;">{xga_result}</h5>
#                         </div>
#                     '''
#                     st.markdown(xga_html, unsafe_allow_html=True)
# 
#         # Team Possession
#         with st.container():
#             st.markdown("##### **Team Possession**")
#             possession = df_gn_filtered['Poss'][0]
#             display_possession_bar(possession)
# 
#     # Team Formation
#     with col2:
#         st.markdown("##### **Team Formation**")
#         team_formation = df_gn_filtered['Formation'][0]
#         plot_vertical_formation(team_formation, color='dodgerblue')
# 
#     # Opponent Formation
#     with col3:
#         st.markdown("##### **Opponent Formation**")
#         opp_formation = df_gn_filtered['Opp Formation'][0]
#         plot_vertical_formation(opp_formation, color='crimson')
# 
# with tab2:
#     st.subheader("Shooting Data")
#     st.dataframe(df_sh_display, use_container_width=True)
# 
#     st.markdown("---")
#     st.subheader("📊 Visualisasi Shooting (Optional)")
# 
#     show_xg_chart = st.checkbox("Tampilkan Grafik xG per Klub")
#     show_goals_xg_chart = st.checkbox("Tampilkan Grafik Goals - xG per Klub")
# 
#     clubs = df_sh_display.index.tolist()
# 
#     if show_xg_chart:
#         st.markdown("### xG Nottingham Forest")
#         fig_xg, ax_xg = plt.subplots(figsize=(10, 6))
#         df_sh_display['xG'].plot(
#             kind='bar',
#             ax=ax_xg,
#             title='xG Nottingham Forest',
#             color=['red' if club == "Nott'ham Forest" else 'grey' for club in clubs]
#         )
#         ax_xg.set_xlabel('Squad')
#         ax_xg.set_ylabel('xG')
#         ax_xg.set_xticklabels(df_sh_display.index, rotation=45, ha='right')
#         plt.tight_layout()
#         st.pyplot(fig_xg)
# 
#     df_sh_display['G_minus_xG'] = df_sh_display['Goals'] - df_sh_display['xG']
#     if show_goals_xg_chart:
#       st.markdown("### Goals - xG per Club")
#       fig_gxg, ax_gxg = plt.subplots(figsize=(10, 6))
#       df_sh_display['G_minus_xG'].plot(
#           kind='bar',
#           ax=ax_gxg,
#           title='Goals - xG',
#           color=['red' if club == "Nott'ham Forest" else 'grey' for club in clubs]
#       )
#       ax_gxg.set_xlabel('Squad')
#       ax_gxg.set_ylabel('Goals - xG')
#       st.pyplot(fig_gxg)
# 
# 
# with tab3:
#     st.subheader("Possession Data")
#     st.dataframe(df_ps_display, use_container_width=True)
# 
#     st.markdown("---")
#     st.subheader("📊 Visualisasi Tambahan Possession (Optional)")
# 
#     show_tpg_chart = st.checkbox("Tampilkan Grafik Touches per Goal")
#     show_poss_chart = st.checkbox("Tampilkan Grafik Possession per Klub")
#     show_scatter_poss_tackles = st.checkbox("Tampilkan Scatter Plot Possession vs Tackles per Klub")
# 
#     # Touches per Goal
#     if show_tpg_chart:
#         st.markdown("### Touches per Goal")
#         fig_tpg, ax_tpg = plt.subplots(figsize=(12, 6))
#         df_sh_display['Touches per Goal'].plot(
#             kind='bar',
#             ax=ax_tpg,
#             color=['red' if club == "Nott'ham Forest" else 'grey' for club in clubs],
#             title='Touches per Goal',
#             rot=90
#         )
#         ax_tpg.set_xlabel('Squad')
#         ax_tpg.set_ylabel('Touches per Goal')
#         ax_tpg.set_xticklabels(df_sh_display.index, rotation=45, ha='right')
#         plt.tight_layout()
#         st.pyplot(fig_tpg)
# 
#     # Possession
#     if show_poss_chart:
#         st.markdown("### Possession Nottingham Forest")
#         fig_poss, ax_poss = plt.subplots(figsize=(12, 6))
#         df_ps_display['Poss'].plot(
#             kind='bar',
#             ax=ax_poss,
#             color=['red' if club == "Nott'ham Forest" else 'grey' for club in clubs],
#             title='Possession Nottingham Forest',
#             rot=90
#         )
#         ax_poss.set_xlabel('Squad')
#         ax_poss.set_ylabel('Possession (%)')
#         ax_poss.set_xticklabels(df_ps_display.index, rotation=45, ha='right')
#         plt.tight_layout()
#         st.pyplot(fig_poss)
# 
#     # Scatter Plot Possession vs Tackles
#     if show_scatter_poss_tackles:
#         st.markdown("### Scatter Plot Possession vs Tackles per Klub")
#         fig_scatter, ax_scatter = plt.subplots(figsize=(10, 6))
#         ax_scatter.scatter(df_ps_display['Poss'], df_ps_display['Tackles'], color=['red' if club == "Nott'ham Forest" else 'grey' for club in clubs], alpha=0.7)
# 
#         for i, club in enumerate(clubs):
#             ax_scatter.annotate(
#                 club,
#                 (df_ps_display['Poss'].iloc[i], df_ps_display['Tackles'].iloc[i]),
#                 fontsize=9,
#                 color='red' if club == "Nott'ham Forest" else 'black',
#                 fontweight='bold' if club == "Nott'ham Forest" else 'normal',
#                 xytext=(4, 2),
#                 textcoords='offset points',
#                 zorder=3
#             )
# 
#         ax_scatter.set_xlabel('Possession (%)')
#         ax_scatter.set_ylabel('Tackles')
#         ax_scatter.set_title('Hubungan antara Possession dan Tackles per Klub', fontsize=14)
#         plt.tight_layout()
#         st.pyplot(fig_scatter)
# 
#     # Scatter Plot Possession vs xG (24/25)
#     if '24/25_1' in df_gn_display.index:
#         st.markdown("### Scatter Plot Possession vs xG (Musim 24/25)")
#         df_s25 = df_gn_display.loc['24/25_1':'24/25_38']
#         fig2, ax2 = plt.subplots(figsize=(10, 6))
#         ax2.scatter(df_s25['Poss'], df_s25['xG'])
#         ax2.set_xlabel('Possession')
#         ax2.set_ylabel('xG')
#         ax2.set_title('Scatter Plot Possession vs xG untuk Musim 24/25')
#         st.pyplot(fig2)
# 
# with tab4:
#     st.subheader("Passing Data")
#     st.dataframe(df_pass_display, use_container_width=True)
# 
#     st.markdown("---")
#     st.subheader("📊 Visualisasi Tambahan Passing (Optional)")
# 
#     show_ppg_chart = st.checkbox("Tampilkan Grafik Passes per Goal")
# 
#     if show_ppg_chart:
#         st.markdown("### Passes per Goal")
#         fig_ppg, ax_ppg = plt.subplots(figsize=(12, 6))
#         df_sh_display['Passes per Goal'].plot(
#             kind='bar',
#             ax=ax_ppg,
#             color=['red' if club == "Nott'ham Forest" else 'grey' for club in clubs],
#             title='Passes per Goal',
#             rot=90
#         )
#         ax_ppg.set_xlabel('Squad')
#         ax_ppg.set_ylabel('Passes per Goal')
#         ax_ppg.set_xticklabels(df_sh_display.index, rotation=45, ha='right')
#         plt.tight_layout()
#         st.pyplot(fig_ppg)
# 
# with tab5:
#     st.subheader("Defensive Stats (Squad)")
# 
#     squad_options = df_dfd_display.index.unique().tolist()
#     selected_squad = st.selectbox("Select Squad", squad_options)
# 
#     # Tampilkan tabel untuk squad terpilih
#     st.dataframe(df_dfd_display.loc[[selected_squad]], use_container_width=True)
# 
#     st.markdown("---")
#     st.subheader("🔴 Defensive Visualizations (Pilih Sesuai Kebutuhan)")
# 
#     show_goals_against = st.checkbox("Tampilkan Goals Against")
#     show_cleansheets = st.checkbox("Tampilkan Cleansheets")
#     show_xga = st.checkbox("Tampilkan xGA")
#     show_tackles_stack = st.checkbox("Tampilkan Tackles per Area (Stacked)")
# 
#     # Goals Against
#     if show_goals_against:
#         st.markdown("### Goals Against (Seluruh Tim)")
#         fig_def1, ax_def1 = plt.subplots(figsize=(10, 6))
#         color_ga = ['red' if club == "Nott'ham Forest" else 'grey' for club in df_dfd_display.index]
#         df_dfd_display['Goals Against'].plot(kind='bar', ax=ax_def1, color=color_ga, title='Goals Against Nottingham Forest')
#         st.pyplot(fig_def1)
# 
#     # Cleansheets
#     if show_cleansheets:
#         st.markdown("### Cleansheets (Seluruh Tim)")
#         fig_def2, ax_def2 = plt.subplots(figsize=(10, 6))
#         color_cs = ['red' if club == "Nott'ham Forest" else 'grey' for club in df_dfd_display.index]
#         df_dfd_display['Cleansheets'].plot(kind='bar', ax=ax_def2, color=color_cs, title='Cleansheets Nottingham Forest')
#         st.pyplot(fig_def2)
# 
#     # xGA
#     if show_xga:
#         st.markdown("### xGA (Expected Goals Against)")
#         fig_def3, ax_def3 = plt.subplots(figsize=(10, 6))
#         color_xga = ['red' if club == "Nott'ham Forest" else 'grey' for club in df_dfd_display.index]
#         df_dfd_display['xGA'].plot(kind='bar', ax=ax_def3, color=color_xga, title='xGA Nottingham Forest')
#         st.pyplot(fig_def3)
# 
#     # Normalisasi metrik defensif (hanya dihitung jika butuh stacked chart)
#     if show_tackles_stack:
#         df_dfd_display['Tackles%'] = df_dfd_display['Tackles'] / df_dfd_display['Tackles'].mean()
#         df_dfd_display['Tackles Won%'] = df_dfd_display['Tackles Won'] / df_dfd_display['Tackles Won'].mean()
#         df_dfd_display['Goals Against%'] = df_dfd_display['Goals Against'] / df_dfd_display['Goals Against'].mean()
#         df_dfd_display['Cleansheets%'] = df_dfd_display['Cleansheets'] / df_dfd_display['Cleansheets'].mean()
#         df_dfd_display['xGA%'] = df_dfd_display['xGA'] / df_dfd_display['xGA'].mean()
# 
#         scaler = MinMaxScaler()
#         df_dfd_display[['Tackles%', 'Tackles Won%', 'Goals Against%', 'Cleansheets%', 'xGA%']] = scaler.fit_transform(
#             df_dfd_display[['Tackles%', 'Tackles Won%', 'Goals Against%', 'Cleansheets%', 'xGA%']]
#         )
# 
#         # Stacked Bar Chart
#         st.markdown("### Tackles per Area (Stacked Bar)")
#         tackles_data = df_dfd_display[['Tackles Def 3rd', 'Tackles Mid 3rd', 'Tackles Att 3rd', 'Goals Against']].copy()
#         tackles_data = tackles_data.sort_values(by='Goals Against', ascending=False)
# 
#         fig_def4, ax_def4 = plt.subplots(figsize=(10, 6))
#         ax_def4.bar(tackles_data.index, tackles_data['Tackles Def 3rd'], label='Def 3rd')
#         ax_def4.bar(tackles_data.index, tackles_data['Tackles Mid 3rd'],
#                     bottom=tackles_data['Tackles Def 3rd'], label='Mid 3rd')
#         ax_def4.bar(tackles_data.index, tackles_data['Tackles Att 3rd'],
#                     bottom=tackles_data['Tackles Def 3rd'] + tackles_data['Tackles Mid 3rd'],
#                     label='Att 3rd')
# 
#         ax_def4.set_title('Tackles per Area (Stacked)', fontsize=14, fontweight='bold')
#         ax_def4.set_ylabel('Jumlah Tackles')
#         ax_def4.set_xlabel('Klub')
#         ax_def4.tick_params(axis='x', rotation=45)
#         ax_def4.legend()
#         st.pyplot(fig_def4)
# 
# with tab6:
#     st.subheader("Detailed GCA Data")
#     st.dataframe(df_gca_display, use_container_width=True)
# 
#     st.markdown("---")
#     st.subheader("📊 Visualisasi GCA (Optional)")
# 
#     show_gca_chart = st.checkbox("Tampilkan Line Chart GCA Nottingham Forest")
# 
#     if show_gca_chart:
#         st.markdown("### GCA Nottingham Forest (Line Chart)")
#         fig, ax = plt.subplots(figsize=(10, 6))
# 
#         ax = merge_gcas_display['GCA'].plot(
#             kind='line',
#             ax=ax,
#             title='GCA Nottingham Forest',
#             color=['#0072B2', '#E69F00']
#         )
# 
#         change_pos = df_gn_display.index.get_loc('23/24_19')
#         ax.axvline(x=change_pos, color='#D55E00', linestyle='--', linewidth=2, label='Perubahan Pelatih Kepala')
#         ax.axvspan(0, change_pos, color='#cfe2f3', alpha=0.3, label='Sebelum')
#         ax.axvspan(change_pos, len(df_gn_display), color='#fce5cd', alpha=0.3, label='Setelah')
# 
#         ax.set_xlabel('Round')
#         ax.set_ylabel('Value')
#         ax.legend()
#         plt.tight_layout()
#         st.pyplot(fig)
# 
#     # Ringkasan total GF-GA
#     st.markdown("---")
#     st.subheader("📈 Ringkasan Total GF-GA per Musim")
# 
#     total_gfga_2223 = df_gn_display.loc['22/23_1':'22/23_38', 'GF-GA'].sum()
#     total_gfga_2324 = df_gn_display.loc['23/24_1':'23/24_38', 'GF-GA'].sum()
#     total_gfga_2425 = df_gn_display.loc['24/25_1':'24/25_38', 'GF-GA'].sum()
# 
#     st.markdown(f"""
#     - **2022/23:** {total_gfga_2223}
#     - **2023/24:** {total_gfga_2324}
#     - **2024/25:** {total_gfga_2425}
#     """)
# 
# with tab7:
#     st.subheader("📋 Player Shooting Data")
#     st.dataframe(df_shooting_display, use_container_width=True)
# 
# # Sidebar
# sidecol1, sidecol2 = st.sidebar.columns([0.2, 0.8], vertical_alignment='center')
# with sidecol1:
#     st.image('https://upload.wikimedia.org/wikipedia/en/thumb/e/e5/Nottingham_Forest_F.C._logo.svg/800px-Nottingham_Forest_F.C._logo.svg.png', use_container_width=True)
# 
# with sidecol2:
#     st.markdown('# Nottingham Forest Dashboard')
# 
# st.sidebar.markdown(
#     '''
#     ---
#     # **Info**
#     Berikut adalah hasil pertandingan Premier League selama musim 2022 sampai 2025.
#     Data diperoleh dari [fbref.com](https://fbref.com/) dengan fokus kepada klub bola Nottingham Forest.
#     '''
# )
#

# Step 4: Run the Streamlit app and expose it via LocalTunnel
# !wget -q -O - ipv4.icanhazip.com
# !streamlit run app.py & npx localtunnel --port 8501

# !mv "copy_of_midterm_visdat_203012410027_muhammad_rafi_yanaputeranto_203012410025_hanif_aditya_pradana_ver2.py" streamlit_app.py

# Commented out IPython magic to ensure Python compatibility.
# %%writefile requirements.txt
# streamlit
# pandas
# matplotlib
# seaborn
# # Add any other packages you used

# from google.colab import files
# files.download("streamlit_app.py")
# files.download("requirements.txt")
